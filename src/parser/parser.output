Nonterminals useless in grammar

    FuncType


Terminals unused in grammar

    ERROR


State 16 conflicts: 1 shift/reduce, 2 reduce/reduce
State 55 conflicts: 1 shift/reduce, 2 reduce/reduce
State 167 conflicts: 1 shift/reduce


Grammar

    0 $accept: CompUnit $end

    1 CompUnit: CompUnit FuncDef
    2         | CompUnit Decl
    3         | FuncDef
    4         | Decl

    5 FuncDef: BType Ident LPAREN RPAREN Block
    6        | VOID Ident LPAREN RPAREN Block
    7        | BType Ident LPAREN FuncFParam FuncFParamsGroup RPAREN Block
    8        | VOID Ident LPAREN FuncFParam FuncFParamsGroup RPAREN Block

    9 FuncFParam: BType Ident
   10           | BType Ident LBRACKET RBRACKET ExpGroup

   11 ExpGroup: LBRACKET Exp RBRACKET ExpGroup
   12         | %empty

   13 FuncFParamsGroup: COMMA FuncFParam FuncFParamsGroup
   14                 | %empty

   15 Block: LBRACE BlockItems RBRACE

   16 BlockItems: BlockItems Stmt
   17           | %empty
   18           | BlockItems Decl

   19 Stmt: RETURN Exp SEMICOLON
   20     | Block
   21     | RETURN SEMICOLON
   22     | Lval ASSIGN Exp SEMICOLON
   23     | IF LPAREN Cond RPAREN Stmt
   24     | IF LPAREN Cond RPAREN Stmt ELSE Stmt
   25     | Exp SEMICOLON
   26     | SEMICOLON
   27     | WHILE LPAREN Cond RPAREN Stmt
   28     | BREAK SEMICOLON
   29     | CONTINUE SEMICOLON

   30 PrimaryExp: Number
   31           | Lval
   32           | LPAREN Exp RPAREN

   33 Number: IntConst
   34       | FloatConst

   35 Decl: VarDecl
   36     | ConstDecl

   37 VarDecl: BType VarDef VarDefGroup SEMICOLON

   38 VarDefGroup: COMMA VarDef VarDefGroup
   39            | %empty

   40 VarDef: Ident
   41       | Ident ASSIGN InitVal
   42       | Ident ConstExpGroup
   43       | Ident ConstExpGroup ASSIGN InitVal

   44 InitVal: Exp
   45        | LBRACE InitVal InitValGroup RBRACE
   46        | LBRACE RBRACE

   47 InitValGroup: COMMA InitVal InitValGroup
   48             | %empty

   49 ConstDecl: CONST BType ConstDef ConstDefGroup SEMICOLON

   50 ConstDefGroup: COMMA ConstDef ConstDefGroup
   51              | %empty

   52 ConstDef: Ident ConstExpGroup ASSIGN ConstInitVal

   53 ConstInitVal: ConstExp
   54             | LBRACE ConstInitVal ConstInitValGroup RBRACE
   55             | LBRACE RBRACE

   56 ConstInitValGroup: COMMA ConstInitVal ConstInitValGroup
   57                  | %empty

   58 ConstExpGroup: LBRACKET ConstExp RBRACKET ConstExpGroup
   59              | %empty

   60 ConstExp: AddExp

   61 BType: INT
   62      | FLOAT

   63 AddExp: MulExp
   64       | AddExp ADD MulExp
   65       | AddExp SUB MulExp

   66 Exp: AddExp

   67 MulExp: UnaryExp
   68       | MulExp MUL UnaryExp
   69       | MulExp DIV UnaryExp
   70       | MulExp MOD UnaryExp

   71 Lval: Ident ExpGroup

   72 Cond: LOrExp

   73 LOrExp: LAndExp
   74       | LOrExp OR LAndExp

   75 LAndExp: EqExp
   76        | LAndExp AND EqExp

   77 EqExp: RelExp
   78      | EqExp EQUAL RelExp
   79      | EqExp NOT_EQUAL RelExp

   80 RelExp: AddExp
   81       | RelExp LESS AddExp
   82       | RelExp GREATER AddExp
   83       | RelExp LESS_EQUAL AddExp
   84       | RelExp GREATER_EQUAL AddExp

   85 UnaryExp: PrimaryExp
   86         | UnaryOp UnaryExp
   87         | Ident LPAREN Exp FuncRParamsGroup RPAREN
   88         | Ident LPAREN RPAREN

   89 FuncRParamsGroup: COMMA Exp FuncRParamsGroup
   90                 | %empty

   91 UnaryOp: ADD
   92        | SUB
   93        | NOT


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INT <current_symbol> (258) 61
    FLOAT <current_symbol> (259) 62
    VOID <current_symbol> (260) 6 8
    IF <current_symbol> (261) 23 24
    ELSE <current_symbol> (262) 24
    WHILE <current_symbol> (263) 27
    BREAK <current_symbol> (264) 28
    CONTINUE <current_symbol> (265) 29
    RETURN <current_symbol> (266) 19 21
    Ident <current_symbol> (267) 5 6 7 8 9 10 40 41 42 43 52 71 87 88
    CONST <current_symbol> (268) 49
    ADD <current_symbol> (269) 64 91
    SUB <current_symbol> (270) 65 92
    MUL <current_symbol> (271) 68
    DIV <current_symbol> (272) 69
    MOD <current_symbol> (273) 70
    LPAREN <current_symbol> (274) 5 6 7 8 23 24 27 32 87 88
    RPAREN <current_symbol> (275) 5 6 7 8 23 24 27 32 87 88
    LBRACKET <current_symbol> (276) 10 11 58
    RBRACKET <current_symbol> (277) 10 11 58
    LBRACE <current_symbol> (278) 15 45 46 54 55
    RBRACE <current_symbol> (279) 15 45 46 54 55
    IntConst <current_symbol> (280) 33
    FloatConst <current_symbol> (281) 34
    LESS <current_symbol> (282) 81
    GREATER <current_symbol> (283) 82
    EQUAL <current_symbol> (284) 78
    NOT <current_symbol> (285) 93
    LESS_EQUAL <current_symbol> (286) 83
    GREATER_EQUAL <current_symbol> (287) 84
    NOT_EQUAL <current_symbol> (288) 79
    AND <current_symbol> (289) 76
    OR <current_symbol> (290) 74
    ASSIGN <current_symbol> (291) 22 41 43 52
    COMMA <current_symbol> (292) 13 38 47 50 56 89
    SEMICOLON <current_symbol> (293) 19 21 22 25 26 28 29 37 49
    ERROR <current_symbol> (294)


Nonterminals, with rules where they appear

    $accept (40)
        on left: 0
    CompUnit <compunit> (41)
        on left: 1 2 3 4
        on right: 0 1 2
    FuncDef <func_def> (42)
        on left: 5 6 7 8
        on right: 1 3
    FuncFParam <func_f_param> (43)
        on left: 9 10
        on right: 7 8 13
    ExpGroup (44)
        on left: 11 12
        on right: 10 11 71
    FuncFParamsGroup (45)
        on left: 13 14
        on right: 7 8 13
    Block <block> (46)
        on left: 15
        on right: 5 6 7 8 20
    BlockItems <block> (47)
        on left: 16 17 18
        on right: 15 16 18
    Stmt <stmt> (48)
        on left: 19 20 21 22 23 24 25 26 27 28 29
        on right: 16 23 24 27
    PrimaryExp <expr> (49)
        on left: 30 31 32
        on right: 85
    Number (50)
        on left: 33 34
        on right: 30
    Decl <stmt> (51)
        on left: 35 36
        on right: 2 4 18
    VarDecl <stmt> (52)
        on left: 37
        on right: 35
    VarDefGroup <var_decl_stmt> (53)
        on left: 38 39
        on right: 37 38
    VarDef <var_def_stmt> (54)
        on left: 40 41 42 43
        on right: 37 38
    InitVal <expr> (55)
        on left: 44 45 46
        on right: 41 43 45 47
    InitValGroup (56)
        on left: 47 48
        on right: 45 47
    ConstDecl <stmt> (57)
        on left: 49
        on right: 36
    ConstDefGroup <var_decl_stmt> (58)
        on left: 50 51
        on right: 49 50
    ConstDef <var_def_stmt> (59)
        on left: 52
        on right: 49 50
    ConstInitVal (60)
        on left: 53 54 55
        on right: 52 54 56
    ConstInitValGroup (61)
        on left: 56 57
        on right: 54 56
    ConstExpGroup (62)
        on left: 58 59
        on right: 42 43 52 58
    ConstExp (63)
        on left: 60
        on right: 53 58
    BType <var_type> (64)
        on left: 61 62
        on right: 5 7 9 10 37 49
    AddExp <expr> (65)
        on left: 63 64 65
        on right: 60 64 65 66 80 81 82 83 84
    Exp <expr> (66)
        on left: 66
        on right: 11 19 22 25 32 44 87 89
    MulExp <expr> (67)
        on left: 67 68 69 70
        on right: 63 64 65 68 69 70
    Lval <lval> (68)
        on left: 71
        on right: 22 31
    Cond <expr> (69)
        on left: 72
        on right: 23 24 27
    LOrExp <expr> (70)
        on left: 73 74
        on right: 72 74
    LAndExp <expr> (71)
        on left: 75 76
        on right: 73 74 76
    EqExp <expr> (72)
        on left: 77 78 79
        on right: 75 76 78 79
    RelExp <expr> (73)
        on left: 80 81 82 83 84
        on right: 77 78 79 81 82 83 84
    UnaryExp <expr> (74)
        on left: 85 86 87 88
        on right: 67 68 69 70 86
    FuncRParamsGroup (75)
        on left: 89 90
        on right: 87 89
    UnaryOp <current_symbol> (76)
        on left: 91 92 93
        on right: 86


State 0

    0 $accept: . CompUnit $end

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2
    VOID   shift, and go to state 3
    CONST  shift, and go to state 4

    CompUnit   go to state 5
    FuncDef    go to state 6
    Decl       go to state 7
    VarDecl    go to state 8
    ConstDecl  go to state 9
    BType      go to state 10


State 1

   61 BType: INT .

    $default  reduce using rule 61 (BType)


State 2

   62 BType: FLOAT .

    $default  reduce using rule 62 (BType)


State 3

    6 FuncDef: VOID . Ident LPAREN RPAREN Block
    8        | VOID . Ident LPAREN FuncFParam FuncFParamsGroup RPAREN Block

    Ident  shift, and go to state 11


State 4

   49 ConstDecl: CONST . BType ConstDef ConstDefGroup SEMICOLON

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2

    BType  go to state 12


State 5

    0 $accept: CompUnit . $end
    1 CompUnit: CompUnit . FuncDef
    2         | CompUnit . Decl

    $end   shift, and go to state 13
    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2
    VOID   shift, and go to state 3
    CONST  shift, and go to state 4

    FuncDef    go to state 14
    Decl       go to state 15
    VarDecl    go to state 8
    ConstDecl  go to state 9
    BType      go to state 10


State 6

    3 CompUnit: FuncDef .

    $default  reduce using rule 3 (CompUnit)


State 7

    4 CompUnit: Decl .

    $default  reduce using rule 4 (CompUnit)


State 8

   35 Decl: VarDecl .

    $default  reduce using rule 35 (Decl)


State 9

   36 Decl: ConstDecl .

    $default  reduce using rule 36 (Decl)


State 10

    5 FuncDef: BType . Ident LPAREN RPAREN Block
    7        | BType . Ident LPAREN FuncFParam FuncFParamsGroup RPAREN Block
   37 VarDecl: BType . VarDef VarDefGroup SEMICOLON

    Ident  shift, and go to state 16

    VarDef  go to state 17


State 11

    6 FuncDef: VOID Ident . LPAREN RPAREN Block
    8        | VOID Ident . LPAREN FuncFParam FuncFParamsGroup RPAREN Block

    LPAREN  shift, and go to state 18


State 12

   49 ConstDecl: CONST BType . ConstDef ConstDefGroup SEMICOLON

    Ident  shift, and go to state 19

    ConstDef  go to state 20


State 13

    0 $accept: CompUnit $end .

    $default  accept


State 14

    1 CompUnit: CompUnit FuncDef .

    $default  reduce using rule 1 (CompUnit)


State 15

    2 CompUnit: CompUnit Decl .

    $default  reduce using rule 2 (CompUnit)


State 16

    5 FuncDef: BType Ident . LPAREN RPAREN Block
    7        | BType Ident . LPAREN FuncFParam FuncFParamsGroup RPAREN Block
   40 VarDef: Ident .
   41       | Ident . ASSIGN InitVal
   42       | Ident . ConstExpGroup
   43       | Ident . ConstExpGroup ASSIGN InitVal

    LPAREN    shift, and go to state 21
    LBRACKET  shift, and go to state 22
    ASSIGN    shift, and go to state 23

    ASSIGN     [reduce using rule 59 (ConstExpGroup)]
    COMMA      reduce using rule 40 (VarDef)
    COMMA      [reduce using rule 59 (ConstExpGroup)]
    SEMICOLON  reduce using rule 40 (VarDef)
    SEMICOLON  [reduce using rule 59 (ConstExpGroup)]
    $default   reduce using rule 40 (VarDef)

    ConstExpGroup  go to state 24

    reduce/reduce conflict on tokens COMMA, SEMICOLON:
       40 VarDef: Ident .
       59 ConstExpGroup: %empty .
      Example: BType Ident . SEMICOLON
      First reduce derivation
        VarDecl
        `-> 37: BType VarDef          VarDefGroup    SEMICOLON
                      `-> 40: Ident . `-> 37: %empty
      Second reduce derivation
        VarDecl
        `-> 37: BType VarDef                         VarDefGroup    SEMICOLON
                      `-> 42: Ident ConstExpGroup    `-> 37: %empty
                                    `-> 59: %empty .

    shift/reduce conflict on token ASSIGN:
       59 ConstExpGroup: %empty .
       41 VarDef: Ident . ASSIGN InitVal
      Example: Ident . ASSIGN InitVal
      Shift derivation
        VarDef
        `-> 41: Ident . ASSIGN InitVal
      Reduce derivation
        VarDef
        `-> 43: Ident ConstExpGroup    ASSIGN InitVal
                      `-> 59: %empty .



State 17

   37 VarDecl: BType VarDef . VarDefGroup SEMICOLON

    COMMA  shift, and go to state 25

    $default  reduce using rule 39 (VarDefGroup)

    VarDefGroup  go to state 26


State 18

    6 FuncDef: VOID Ident LPAREN . RPAREN Block
    8        | VOID Ident LPAREN . FuncFParam FuncFParamsGroup RPAREN Block

    INT     shift, and go to state 1
    FLOAT   shift, and go to state 2
    RPAREN  shift, and go to state 27

    FuncFParam  go to state 28
    BType       go to state 29


State 19

   52 ConstDef: Ident . ConstExpGroup ASSIGN ConstInitVal

    LBRACKET  shift, and go to state 22

    $default  reduce using rule 59 (ConstExpGroup)

    ConstExpGroup  go to state 30


State 20

   49 ConstDecl: CONST BType ConstDef . ConstDefGroup SEMICOLON

    COMMA  shift, and go to state 31

    $default  reduce using rule 51 (ConstDefGroup)

    ConstDefGroup  go to state 32


State 21

    5 FuncDef: BType Ident LPAREN . RPAREN Block
    7        | BType Ident LPAREN . FuncFParam FuncFParamsGroup RPAREN Block

    INT     shift, and go to state 1
    FLOAT   shift, and go to state 2
    RPAREN  shift, and go to state 33

    FuncFParam  go to state 34
    BType       go to state 29


State 22

   58 ConstExpGroup: LBRACKET . ConstExp RBRACKET ConstExpGroup

    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41

    PrimaryExp  go to state 42
    Number      go to state 43
    ConstExp    go to state 44
    AddExp      go to state 45
    MulExp      go to state 46
    Lval        go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49


State 23

   41 VarDef: Ident ASSIGN . InitVal

    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    LBRACE      shift, and go to state 50
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41

    PrimaryExp  go to state 42
    Number      go to state 43
    InitVal     go to state 51
    AddExp      go to state 52
    Exp         go to state 53
    MulExp      go to state 46
    Lval        go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49


State 24

   42 VarDef: Ident ConstExpGroup .
   43       | Ident ConstExpGroup . ASSIGN InitVal

    ASSIGN  shift, and go to state 54

    $default  reduce using rule 42 (VarDef)


State 25

   38 VarDefGroup: COMMA . VarDef VarDefGroup

    Ident  shift, and go to state 55

    VarDef  go to state 56


State 26

   37 VarDecl: BType VarDef VarDefGroup . SEMICOLON

    SEMICOLON  shift, and go to state 57


State 27

    6 FuncDef: VOID Ident LPAREN RPAREN . Block

    LBRACE  shift, and go to state 58

    Block  go to state 59


State 28

    8 FuncDef: VOID Ident LPAREN FuncFParam . FuncFParamsGroup RPAREN Block

    COMMA  shift, and go to state 60

    $default  reduce using rule 14 (FuncFParamsGroup)

    FuncFParamsGroup  go to state 61


State 29

    9 FuncFParam: BType . Ident
   10           | BType . Ident LBRACKET RBRACKET ExpGroup

    Ident  shift, and go to state 62


State 30

   52 ConstDef: Ident ConstExpGroup . ASSIGN ConstInitVal

    ASSIGN  shift, and go to state 63


State 31

   50 ConstDefGroup: COMMA . ConstDef ConstDefGroup

    Ident  shift, and go to state 19

    ConstDef  go to state 64


State 32

   49 ConstDecl: CONST BType ConstDef ConstDefGroup . SEMICOLON

    SEMICOLON  shift, and go to state 65


State 33

    5 FuncDef: BType Ident LPAREN RPAREN . Block

    LBRACE  shift, and go to state 58

    Block  go to state 66


State 34

    7 FuncDef: BType Ident LPAREN FuncFParam . FuncFParamsGroup RPAREN Block

    COMMA  shift, and go to state 60

    $default  reduce using rule 14 (FuncFParamsGroup)

    FuncFParamsGroup  go to state 67


State 35

   71 Lval: Ident . ExpGroup
   87 UnaryExp: Ident . LPAREN Exp FuncRParamsGroup RPAREN
   88         | Ident . LPAREN RPAREN

    LPAREN    shift, and go to state 68
    LBRACKET  shift, and go to state 69

    $default  reduce using rule 12 (ExpGroup)

    ExpGroup  go to state 70


State 36

   91 UnaryOp: ADD .

    $default  reduce using rule 91 (UnaryOp)


State 37

   92 UnaryOp: SUB .

    $default  reduce using rule 92 (UnaryOp)


State 38

   32 PrimaryExp: LPAREN . Exp RPAREN

    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41

    PrimaryExp  go to state 42
    Number      go to state 43
    AddExp      go to state 52
    Exp         go to state 71
    MulExp      go to state 46
    Lval        go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49


State 39

   33 Number: IntConst .

    $default  reduce using rule 33 (Number)


State 40

   34 Number: FloatConst .

    $default  reduce using rule 34 (Number)


State 41

   93 UnaryOp: NOT .

    $default  reduce using rule 93 (UnaryOp)


State 42

   85 UnaryExp: PrimaryExp .

    $default  reduce using rule 85 (UnaryExp)


State 43

   30 PrimaryExp: Number .

    $default  reduce using rule 30 (PrimaryExp)


State 44

   58 ConstExpGroup: LBRACKET ConstExp . RBRACKET ConstExpGroup

    RBRACKET  shift, and go to state 72


State 45

   60 ConstExp: AddExp .
   64 AddExp: AddExp . ADD MulExp
   65       | AddExp . SUB MulExp

    ADD  shift, and go to state 73
    SUB  shift, and go to state 74

    $default  reduce using rule 60 (ConstExp)


State 46

   63 AddExp: MulExp .
   68 MulExp: MulExp . MUL UnaryExp
   69       | MulExp . DIV UnaryExp
   70       | MulExp . MOD UnaryExp

    MUL  shift, and go to state 75
    DIV  shift, and go to state 76
    MOD  shift, and go to state 77

    $default  reduce using rule 63 (AddExp)


State 47

   31 PrimaryExp: Lval .

    $default  reduce using rule 31 (PrimaryExp)


State 48

   67 MulExp: UnaryExp .

    $default  reduce using rule 67 (MulExp)


State 49

   86 UnaryExp: UnaryOp . UnaryExp

    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41

    PrimaryExp  go to state 42
    Number      go to state 43
    Lval        go to state 47
    UnaryExp    go to state 78
    UnaryOp     go to state 49


State 50

   45 InitVal: LBRACE . InitVal InitValGroup RBRACE
   46        | LBRACE . RBRACE

    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    LBRACE      shift, and go to state 50
    RBRACE      shift, and go to state 79
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41

    PrimaryExp  go to state 42
    Number      go to state 43
    InitVal     go to state 80
    AddExp      go to state 52
    Exp         go to state 53
    MulExp      go to state 46
    Lval        go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49


State 51

   41 VarDef: Ident ASSIGN InitVal .

    $default  reduce using rule 41 (VarDef)


State 52

   64 AddExp: AddExp . ADD MulExp
   65       | AddExp . SUB MulExp
   66 Exp: AddExp .

    ADD  shift, and go to state 73
    SUB  shift, and go to state 74

    $default  reduce using rule 66 (Exp)


State 53

   44 InitVal: Exp .

    $default  reduce using rule 44 (InitVal)


State 54

   43 VarDef: Ident ConstExpGroup ASSIGN . InitVal

    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    LBRACE      shift, and go to state 50
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41

    PrimaryExp  go to state 42
    Number      go to state 43
    InitVal     go to state 81
    AddExp      go to state 52
    Exp         go to state 53
    MulExp      go to state 46
    Lval        go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49


State 55

   40 VarDef: Ident .
   41       | Ident . ASSIGN InitVal
   42       | Ident . ConstExpGroup
   43       | Ident . ConstExpGroup ASSIGN InitVal

    LBRACKET  shift, and go to state 22
    ASSIGN    shift, and go to state 23

    ASSIGN     [reduce using rule 59 (ConstExpGroup)]
    COMMA      reduce using rule 40 (VarDef)
    COMMA      [reduce using rule 59 (ConstExpGroup)]
    SEMICOLON  reduce using rule 40 (VarDef)
    SEMICOLON  [reduce using rule 59 (ConstExpGroup)]
    $default   reduce using rule 40 (VarDef)

    ConstExpGroup  go to state 24

    reduce/reduce conflict on tokens COMMA, SEMICOLON:
       40 VarDef: Ident .
       59 ConstExpGroup: %empty .
      Example: COMMA Ident .
      First reduce derivation
        VarDefGroup
        `-> 38: COMMA VarDef          VarDefGroup
                      `-> 40: Ident . `-> 38: %empty
      Second reduce derivation
        VarDefGroup
        `-> 38: COMMA VarDef                         VarDefGroup
                      `-> 42: Ident ConstExpGroup    `-> 38: %empty
                                    `-> 59: %empty .

    shift/reduce conflict on token ASSIGN:
       59 ConstExpGroup: %empty .
       41 VarDef: Ident . ASSIGN InitVal
      Example: Ident . ASSIGN InitVal
      Shift derivation
        VarDef
        `-> 41: Ident . ASSIGN InitVal
      Reduce derivation
        VarDef
        `-> 43: Ident ConstExpGroup    ASSIGN InitVal
                      `-> 59: %empty .



State 56

   38 VarDefGroup: COMMA VarDef . VarDefGroup

    COMMA  shift, and go to state 25

    $default  reduce using rule 39 (VarDefGroup)

    VarDefGroup  go to state 82


State 57

   37 VarDecl: BType VarDef VarDefGroup SEMICOLON .

    $default  reduce using rule 37 (VarDecl)


State 58

   15 Block: LBRACE . BlockItems RBRACE

    $default  reduce using rule 17 (BlockItems)

    BlockItems  go to state 83


State 59

    6 FuncDef: VOID Ident LPAREN RPAREN Block .

    $default  reduce using rule 6 (FuncDef)


State 60

   13 FuncFParamsGroup: COMMA . FuncFParam FuncFParamsGroup

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2

    FuncFParam  go to state 84
    BType       go to state 29


State 61

    8 FuncDef: VOID Ident LPAREN FuncFParam FuncFParamsGroup . RPAREN Block

    RPAREN  shift, and go to state 85


State 62

    9 FuncFParam: BType Ident .
   10           | BType Ident . LBRACKET RBRACKET ExpGroup

    LBRACKET  shift, and go to state 86

    $default  reduce using rule 9 (FuncFParam)


State 63

   52 ConstDef: Ident ConstExpGroup ASSIGN . ConstInitVal

    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    LBRACE      shift, and go to state 87
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41

    PrimaryExp    go to state 42
    Number        go to state 43
    ConstInitVal  go to state 88
    ConstExp      go to state 89
    AddExp        go to state 45
    MulExp        go to state 46
    Lval          go to state 47
    UnaryExp      go to state 48
    UnaryOp       go to state 49


State 64

   50 ConstDefGroup: COMMA ConstDef . ConstDefGroup

    COMMA  shift, and go to state 31

    $default  reduce using rule 51 (ConstDefGroup)

    ConstDefGroup  go to state 90


State 65

   49 ConstDecl: CONST BType ConstDef ConstDefGroup SEMICOLON .

    $default  reduce using rule 49 (ConstDecl)


State 66

    5 FuncDef: BType Ident LPAREN RPAREN Block .

    $default  reduce using rule 5 (FuncDef)


State 67

    7 FuncDef: BType Ident LPAREN FuncFParam FuncFParamsGroup . RPAREN Block

    RPAREN  shift, and go to state 91


State 68

   87 UnaryExp: Ident LPAREN . Exp FuncRParamsGroup RPAREN
   88         | Ident LPAREN . RPAREN

    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    RPAREN      shift, and go to state 92
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41

    PrimaryExp  go to state 42
    Number      go to state 43
    AddExp      go to state 52
    Exp         go to state 93
    MulExp      go to state 46
    Lval        go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49


State 69

   11 ExpGroup: LBRACKET . Exp RBRACKET ExpGroup

    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41

    PrimaryExp  go to state 42
    Number      go to state 43
    AddExp      go to state 52
    Exp         go to state 94
    MulExp      go to state 46
    Lval        go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49


State 70

   71 Lval: Ident ExpGroup .

    $default  reduce using rule 71 (Lval)


State 71

   32 PrimaryExp: LPAREN Exp . RPAREN

    RPAREN  shift, and go to state 95


State 72

   58 ConstExpGroup: LBRACKET ConstExp RBRACKET . ConstExpGroup

    LBRACKET  shift, and go to state 22

    $default  reduce using rule 59 (ConstExpGroup)

    ConstExpGroup  go to state 96


State 73

   64 AddExp: AddExp ADD . MulExp

    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41

    PrimaryExp  go to state 42
    Number      go to state 43
    MulExp      go to state 97
    Lval        go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49


State 74

   65 AddExp: AddExp SUB . MulExp

    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41

    PrimaryExp  go to state 42
    Number      go to state 43
    MulExp      go to state 98
    Lval        go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49


State 75

   68 MulExp: MulExp MUL . UnaryExp

    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41

    PrimaryExp  go to state 42
    Number      go to state 43
    Lval        go to state 47
    UnaryExp    go to state 99
    UnaryOp     go to state 49


State 76

   69 MulExp: MulExp DIV . UnaryExp

    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41

    PrimaryExp  go to state 42
    Number      go to state 43
    Lval        go to state 47
    UnaryExp    go to state 100
    UnaryOp     go to state 49


State 77

   70 MulExp: MulExp MOD . UnaryExp

    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41

    PrimaryExp  go to state 42
    Number      go to state 43
    Lval        go to state 47
    UnaryExp    go to state 101
    UnaryOp     go to state 49


State 78

   86 UnaryExp: UnaryOp UnaryExp .

    $default  reduce using rule 86 (UnaryExp)


State 79

   46 InitVal: LBRACE RBRACE .

    $default  reduce using rule 46 (InitVal)


State 80

   45 InitVal: LBRACE InitVal . InitValGroup RBRACE

    COMMA  shift, and go to state 102

    $default  reduce using rule 48 (InitValGroup)

    InitValGroup  go to state 103


State 81

   43 VarDef: Ident ConstExpGroup ASSIGN InitVal .

    $default  reduce using rule 43 (VarDef)


State 82

   38 VarDefGroup: COMMA VarDef VarDefGroup .

    $default  reduce using rule 38 (VarDefGroup)


State 83

   15 Block: LBRACE BlockItems . RBRACE
   16 BlockItems: BlockItems . Stmt
   18           | BlockItems . Decl

    INT         shift, and go to state 1
    FLOAT       shift, and go to state 2
    IF          shift, and go to state 104
    WHILE       shift, and go to state 105
    BREAK       shift, and go to state 106
    CONTINUE    shift, and go to state 107
    RETURN      shift, and go to state 108
    Ident       shift, and go to state 35
    CONST       shift, and go to state 4
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    LBRACE      shift, and go to state 58
    RBRACE      shift, and go to state 109
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41
    SEMICOLON   shift, and go to state 110

    Block       go to state 111
    Stmt        go to state 112
    PrimaryExp  go to state 42
    Number      go to state 43
    Decl        go to state 113
    VarDecl     go to state 8
    ConstDecl   go to state 9
    BType       go to state 114
    AddExp      go to state 52
    Exp         go to state 115
    MulExp      go to state 46
    Lval        go to state 116
    UnaryExp    go to state 48
    UnaryOp     go to state 49


State 84

   13 FuncFParamsGroup: COMMA FuncFParam . FuncFParamsGroup

    COMMA  shift, and go to state 60

    $default  reduce using rule 14 (FuncFParamsGroup)

    FuncFParamsGroup  go to state 117


State 85

    8 FuncDef: VOID Ident LPAREN FuncFParam FuncFParamsGroup RPAREN . Block

    LBRACE  shift, and go to state 58

    Block  go to state 118


State 86

   10 FuncFParam: BType Ident LBRACKET . RBRACKET ExpGroup

    RBRACKET  shift, and go to state 119


State 87

   54 ConstInitVal: LBRACE . ConstInitVal ConstInitValGroup RBRACE
   55             | LBRACE . RBRACE

    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    LBRACE      shift, and go to state 87
    RBRACE      shift, and go to state 120
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41

    PrimaryExp    go to state 42
    Number        go to state 43
    ConstInitVal  go to state 121
    ConstExp      go to state 89
    AddExp        go to state 45
    MulExp        go to state 46
    Lval          go to state 47
    UnaryExp      go to state 48
    UnaryOp       go to state 49


State 88

   52 ConstDef: Ident ConstExpGroup ASSIGN ConstInitVal .

    $default  reduce using rule 52 (ConstDef)


State 89

   53 ConstInitVal: ConstExp .

    $default  reduce using rule 53 (ConstInitVal)


State 90

   50 ConstDefGroup: COMMA ConstDef ConstDefGroup .

    $default  reduce using rule 50 (ConstDefGroup)


State 91

    7 FuncDef: BType Ident LPAREN FuncFParam FuncFParamsGroup RPAREN . Block

    LBRACE  shift, and go to state 58

    Block  go to state 122


State 92

   88 UnaryExp: Ident LPAREN RPAREN .

    $default  reduce using rule 88 (UnaryExp)


State 93

   87 UnaryExp: Ident LPAREN Exp . FuncRParamsGroup RPAREN

    COMMA  shift, and go to state 123

    $default  reduce using rule 90 (FuncRParamsGroup)

    FuncRParamsGroup  go to state 124


State 94

   11 ExpGroup: LBRACKET Exp . RBRACKET ExpGroup

    RBRACKET  shift, and go to state 125


State 95

   32 PrimaryExp: LPAREN Exp RPAREN .

    $default  reduce using rule 32 (PrimaryExp)


State 96

   58 ConstExpGroup: LBRACKET ConstExp RBRACKET ConstExpGroup .

    $default  reduce using rule 58 (ConstExpGroup)


State 97

   64 AddExp: AddExp ADD MulExp .
   68 MulExp: MulExp . MUL UnaryExp
   69       | MulExp . DIV UnaryExp
   70       | MulExp . MOD UnaryExp

    MUL  shift, and go to state 75
    DIV  shift, and go to state 76
    MOD  shift, and go to state 77

    $default  reduce using rule 64 (AddExp)


State 98

   65 AddExp: AddExp SUB MulExp .
   68 MulExp: MulExp . MUL UnaryExp
   69       | MulExp . DIV UnaryExp
   70       | MulExp . MOD UnaryExp

    MUL  shift, and go to state 75
    DIV  shift, and go to state 76
    MOD  shift, and go to state 77

    $default  reduce using rule 65 (AddExp)


State 99

   68 MulExp: MulExp MUL UnaryExp .

    $default  reduce using rule 68 (MulExp)


State 100

   69 MulExp: MulExp DIV UnaryExp .

    $default  reduce using rule 69 (MulExp)


State 101

   70 MulExp: MulExp MOD UnaryExp .

    $default  reduce using rule 70 (MulExp)


State 102

   47 InitValGroup: COMMA . InitVal InitValGroup

    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    LBRACE      shift, and go to state 50
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41

    PrimaryExp  go to state 42
    Number      go to state 43
    InitVal     go to state 126
    AddExp      go to state 52
    Exp         go to state 53
    MulExp      go to state 46
    Lval        go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49


State 103

   45 InitVal: LBRACE InitVal InitValGroup . RBRACE

    RBRACE  shift, and go to state 127


State 104

   23 Stmt: IF . LPAREN Cond RPAREN Stmt
   24     | IF . LPAREN Cond RPAREN Stmt ELSE Stmt

    LPAREN  shift, and go to state 128


State 105

   27 Stmt: WHILE . LPAREN Cond RPAREN Stmt

    LPAREN  shift, and go to state 129


State 106

   28 Stmt: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 130


State 107

   29 Stmt: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 131


State 108

   19 Stmt: RETURN . Exp SEMICOLON
   21     | RETURN . SEMICOLON

    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41
    SEMICOLON   shift, and go to state 132

    PrimaryExp  go to state 42
    Number      go to state 43
    AddExp      go to state 52
    Exp         go to state 133
    MulExp      go to state 46
    Lval        go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49


State 109

   15 Block: LBRACE BlockItems RBRACE .

    $default  reduce using rule 15 (Block)


State 110

   26 Stmt: SEMICOLON .

    $default  reduce using rule 26 (Stmt)


State 111

   20 Stmt: Block .

    $default  reduce using rule 20 (Stmt)


State 112

   16 BlockItems: BlockItems Stmt .

    $default  reduce using rule 16 (BlockItems)


State 113

   18 BlockItems: BlockItems Decl .

    $default  reduce using rule 18 (BlockItems)


State 114

   37 VarDecl: BType . VarDef VarDefGroup SEMICOLON

    Ident  shift, and go to state 55

    VarDef  go to state 17


State 115

   25 Stmt: Exp . SEMICOLON

    SEMICOLON  shift, and go to state 134


State 116

   22 Stmt: Lval . ASSIGN Exp SEMICOLON
   31 PrimaryExp: Lval .

    ASSIGN  shift, and go to state 135

    $default  reduce using rule 31 (PrimaryExp)


State 117

   13 FuncFParamsGroup: COMMA FuncFParam FuncFParamsGroup .

    $default  reduce using rule 13 (FuncFParamsGroup)


State 118

    8 FuncDef: VOID Ident LPAREN FuncFParam FuncFParamsGroup RPAREN Block .

    $default  reduce using rule 8 (FuncDef)


State 119

   10 FuncFParam: BType Ident LBRACKET RBRACKET . ExpGroup

    LBRACKET  shift, and go to state 69

    $default  reduce using rule 12 (ExpGroup)

    ExpGroup  go to state 136


State 120

   55 ConstInitVal: LBRACE RBRACE .

    $default  reduce using rule 55 (ConstInitVal)


State 121

   54 ConstInitVal: LBRACE ConstInitVal . ConstInitValGroup RBRACE

    COMMA  shift, and go to state 137

    $default  reduce using rule 57 (ConstInitValGroup)

    ConstInitValGroup  go to state 138


State 122

    7 FuncDef: BType Ident LPAREN FuncFParam FuncFParamsGroup RPAREN Block .

    $default  reduce using rule 7 (FuncDef)


State 123

   89 FuncRParamsGroup: COMMA . Exp FuncRParamsGroup

    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41

    PrimaryExp  go to state 42
    Number      go to state 43
    AddExp      go to state 52
    Exp         go to state 139
    MulExp      go to state 46
    Lval        go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49


State 124

   87 UnaryExp: Ident LPAREN Exp FuncRParamsGroup . RPAREN

    RPAREN  shift, and go to state 140


State 125

   11 ExpGroup: LBRACKET Exp RBRACKET . ExpGroup

    LBRACKET  shift, and go to state 69

    $default  reduce using rule 12 (ExpGroup)

    ExpGroup  go to state 141


State 126

   47 InitValGroup: COMMA InitVal . InitValGroup

    COMMA  shift, and go to state 102

    $default  reduce using rule 48 (InitValGroup)

    InitValGroup  go to state 142


State 127

   45 InitVal: LBRACE InitVal InitValGroup RBRACE .

    $default  reduce using rule 45 (InitVal)


State 128

   23 Stmt: IF LPAREN . Cond RPAREN Stmt
   24     | IF LPAREN . Cond RPAREN Stmt ELSE Stmt

    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41

    PrimaryExp  go to state 42
    Number      go to state 43
    AddExp      go to state 143
    MulExp      go to state 46
    Lval        go to state 47
    Cond        go to state 144
    LOrExp      go to state 145
    LAndExp     go to state 146
    EqExp       go to state 147
    RelExp      go to state 148
    UnaryExp    go to state 48
    UnaryOp     go to state 49


State 129

   27 Stmt: WHILE LPAREN . Cond RPAREN Stmt

    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41

    PrimaryExp  go to state 42
    Number      go to state 43
    AddExp      go to state 143
    MulExp      go to state 46
    Lval        go to state 47
    Cond        go to state 149
    LOrExp      go to state 145
    LAndExp     go to state 146
    EqExp       go to state 147
    RelExp      go to state 148
    UnaryExp    go to state 48
    UnaryOp     go to state 49


State 130

   28 Stmt: BREAK SEMICOLON .

    $default  reduce using rule 28 (Stmt)


State 131

   29 Stmt: CONTINUE SEMICOLON .

    $default  reduce using rule 29 (Stmt)


State 132

   21 Stmt: RETURN SEMICOLON .

    $default  reduce using rule 21 (Stmt)


State 133

   19 Stmt: RETURN Exp . SEMICOLON

    SEMICOLON  shift, and go to state 150


State 134

   25 Stmt: Exp SEMICOLON .

    $default  reduce using rule 25 (Stmt)


State 135

   22 Stmt: Lval ASSIGN . Exp SEMICOLON

    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41

    PrimaryExp  go to state 42
    Number      go to state 43
    AddExp      go to state 52
    Exp         go to state 151
    MulExp      go to state 46
    Lval        go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49


State 136

   10 FuncFParam: BType Ident LBRACKET RBRACKET ExpGroup .

    $default  reduce using rule 10 (FuncFParam)


State 137

   56 ConstInitValGroup: COMMA . ConstInitVal ConstInitValGroup

    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    LBRACE      shift, and go to state 87
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41

    PrimaryExp    go to state 42
    Number        go to state 43
    ConstInitVal  go to state 152
    ConstExp      go to state 89
    AddExp        go to state 45
    MulExp        go to state 46
    Lval          go to state 47
    UnaryExp      go to state 48
    UnaryOp       go to state 49


State 138

   54 ConstInitVal: LBRACE ConstInitVal ConstInitValGroup . RBRACE

    RBRACE  shift, and go to state 153


State 139

   89 FuncRParamsGroup: COMMA Exp . FuncRParamsGroup

    COMMA  shift, and go to state 123

    $default  reduce using rule 90 (FuncRParamsGroup)

    FuncRParamsGroup  go to state 154


State 140

   87 UnaryExp: Ident LPAREN Exp FuncRParamsGroup RPAREN .

    $default  reduce using rule 87 (UnaryExp)


State 141

   11 ExpGroup: LBRACKET Exp RBRACKET ExpGroup .

    $default  reduce using rule 11 (ExpGroup)


State 142

   47 InitValGroup: COMMA InitVal InitValGroup .

    $default  reduce using rule 47 (InitValGroup)


State 143

   64 AddExp: AddExp . ADD MulExp
   65       | AddExp . SUB MulExp
   80 RelExp: AddExp .

    ADD  shift, and go to state 73
    SUB  shift, and go to state 74

    $default  reduce using rule 80 (RelExp)


State 144

   23 Stmt: IF LPAREN Cond . RPAREN Stmt
   24     | IF LPAREN Cond . RPAREN Stmt ELSE Stmt

    RPAREN  shift, and go to state 155


State 145

   72 Cond: LOrExp .
   74 LOrExp: LOrExp . OR LAndExp

    OR  shift, and go to state 156

    $default  reduce using rule 72 (Cond)


State 146

   73 LOrExp: LAndExp .
   76 LAndExp: LAndExp . AND EqExp

    AND  shift, and go to state 157

    $default  reduce using rule 73 (LOrExp)


State 147

   75 LAndExp: EqExp .
   78 EqExp: EqExp . EQUAL RelExp
   79      | EqExp . NOT_EQUAL RelExp

    EQUAL      shift, and go to state 158
    NOT_EQUAL  shift, and go to state 159

    $default  reduce using rule 75 (LAndExp)


State 148

   77 EqExp: RelExp .
   81 RelExp: RelExp . LESS AddExp
   82       | RelExp . GREATER AddExp
   83       | RelExp . LESS_EQUAL AddExp
   84       | RelExp . GREATER_EQUAL AddExp

    LESS           shift, and go to state 160
    GREATER        shift, and go to state 161
    LESS_EQUAL     shift, and go to state 162
    GREATER_EQUAL  shift, and go to state 163

    $default  reduce using rule 77 (EqExp)


State 149

   27 Stmt: WHILE LPAREN Cond . RPAREN Stmt

    RPAREN  shift, and go to state 164


State 150

   19 Stmt: RETURN Exp SEMICOLON .

    $default  reduce using rule 19 (Stmt)


State 151

   22 Stmt: Lval ASSIGN Exp . SEMICOLON

    SEMICOLON  shift, and go to state 165


State 152

   56 ConstInitValGroup: COMMA ConstInitVal . ConstInitValGroup

    COMMA  shift, and go to state 137

    $default  reduce using rule 57 (ConstInitValGroup)

    ConstInitValGroup  go to state 166


State 153

   54 ConstInitVal: LBRACE ConstInitVal ConstInitValGroup RBRACE .

    $default  reduce using rule 54 (ConstInitVal)


State 154

   89 FuncRParamsGroup: COMMA Exp FuncRParamsGroup .

    $default  reduce using rule 89 (FuncRParamsGroup)


State 155

   23 Stmt: IF LPAREN Cond RPAREN . Stmt
   24     | IF LPAREN Cond RPAREN . Stmt ELSE Stmt

    IF          shift, and go to state 104
    WHILE       shift, and go to state 105
    BREAK       shift, and go to state 106
    CONTINUE    shift, and go to state 107
    RETURN      shift, and go to state 108
    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    LBRACE      shift, and go to state 58
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41
    SEMICOLON   shift, and go to state 110

    Block       go to state 111
    Stmt        go to state 167
    PrimaryExp  go to state 42
    Number      go to state 43
    AddExp      go to state 52
    Exp         go to state 115
    MulExp      go to state 46
    Lval        go to state 116
    UnaryExp    go to state 48
    UnaryOp     go to state 49


State 156

   74 LOrExp: LOrExp OR . LAndExp

    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41

    PrimaryExp  go to state 42
    Number      go to state 43
    AddExp      go to state 143
    MulExp      go to state 46
    Lval        go to state 47
    LAndExp     go to state 168
    EqExp       go to state 147
    RelExp      go to state 148
    UnaryExp    go to state 48
    UnaryOp     go to state 49


State 157

   76 LAndExp: LAndExp AND . EqExp

    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41

    PrimaryExp  go to state 42
    Number      go to state 43
    AddExp      go to state 143
    MulExp      go to state 46
    Lval        go to state 47
    EqExp       go to state 169
    RelExp      go to state 148
    UnaryExp    go to state 48
    UnaryOp     go to state 49


State 158

   78 EqExp: EqExp EQUAL . RelExp

    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41

    PrimaryExp  go to state 42
    Number      go to state 43
    AddExp      go to state 143
    MulExp      go to state 46
    Lval        go to state 47
    RelExp      go to state 170
    UnaryExp    go to state 48
    UnaryOp     go to state 49


State 159

   79 EqExp: EqExp NOT_EQUAL . RelExp

    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41

    PrimaryExp  go to state 42
    Number      go to state 43
    AddExp      go to state 143
    MulExp      go to state 46
    Lval        go to state 47
    RelExp      go to state 171
    UnaryExp    go to state 48
    UnaryOp     go to state 49


State 160

   81 RelExp: RelExp LESS . AddExp

    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41

    PrimaryExp  go to state 42
    Number      go to state 43
    AddExp      go to state 172
    MulExp      go to state 46
    Lval        go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49


State 161

   82 RelExp: RelExp GREATER . AddExp

    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41

    PrimaryExp  go to state 42
    Number      go to state 43
    AddExp      go to state 173
    MulExp      go to state 46
    Lval        go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49


State 162

   83 RelExp: RelExp LESS_EQUAL . AddExp

    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41

    PrimaryExp  go to state 42
    Number      go to state 43
    AddExp      go to state 174
    MulExp      go to state 46
    Lval        go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49


State 163

   84 RelExp: RelExp GREATER_EQUAL . AddExp

    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41

    PrimaryExp  go to state 42
    Number      go to state 43
    AddExp      go to state 175
    MulExp      go to state 46
    Lval        go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49


State 164

   27 Stmt: WHILE LPAREN Cond RPAREN . Stmt

    IF          shift, and go to state 104
    WHILE       shift, and go to state 105
    BREAK       shift, and go to state 106
    CONTINUE    shift, and go to state 107
    RETURN      shift, and go to state 108
    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    LBRACE      shift, and go to state 58
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41
    SEMICOLON   shift, and go to state 110

    Block       go to state 111
    Stmt        go to state 176
    PrimaryExp  go to state 42
    Number      go to state 43
    AddExp      go to state 52
    Exp         go to state 115
    MulExp      go to state 46
    Lval        go to state 116
    UnaryExp    go to state 48
    UnaryOp     go to state 49


State 165

   22 Stmt: Lval ASSIGN Exp SEMICOLON .

    $default  reduce using rule 22 (Stmt)


State 166

   56 ConstInitValGroup: COMMA ConstInitVal ConstInitValGroup .

    $default  reduce using rule 56 (ConstInitValGroup)


State 167

   23 Stmt: IF LPAREN Cond RPAREN Stmt .
   24     | IF LPAREN Cond RPAREN Stmt . ELSE Stmt

    ELSE  shift, and go to state 177

    ELSE      [reduce using rule 23 (Stmt)]
    $default  reduce using rule 23 (Stmt)

    shift/reduce conflict on token ELSE:
       23 Stmt: IF LPAREN Cond RPAREN Stmt .
       24 Stmt: IF LPAREN Cond RPAREN Stmt . ELSE Stmt
      Example: IF LPAREN Cond RPAREN IF LPAREN Cond RPAREN Stmt . ELSE Stmt
      Shift derivation
        Stmt
        `-> 23: IF LPAREN Cond RPAREN Stmt
                                      `-> 24: IF LPAREN Cond RPAREN Stmt . ELSE Stmt
      Reduce derivation
        Stmt
        `-> 24: IF LPAREN Cond RPAREN Stmt                                 ELSE Stmt
                                      `-> 23: IF LPAREN Cond RPAREN Stmt .



State 168

   74 LOrExp: LOrExp OR LAndExp .
   76 LAndExp: LAndExp . AND EqExp

    AND  shift, and go to state 157

    $default  reduce using rule 74 (LOrExp)


State 169

   76 LAndExp: LAndExp AND EqExp .
   78 EqExp: EqExp . EQUAL RelExp
   79      | EqExp . NOT_EQUAL RelExp

    EQUAL      shift, and go to state 158
    NOT_EQUAL  shift, and go to state 159

    $default  reduce using rule 76 (LAndExp)


State 170

   78 EqExp: EqExp EQUAL RelExp .
   81 RelExp: RelExp . LESS AddExp
   82       | RelExp . GREATER AddExp
   83       | RelExp . LESS_EQUAL AddExp
   84       | RelExp . GREATER_EQUAL AddExp

    LESS           shift, and go to state 160
    GREATER        shift, and go to state 161
    LESS_EQUAL     shift, and go to state 162
    GREATER_EQUAL  shift, and go to state 163

    $default  reduce using rule 78 (EqExp)


State 171

   79 EqExp: EqExp NOT_EQUAL RelExp .
   81 RelExp: RelExp . LESS AddExp
   82       | RelExp . GREATER AddExp
   83       | RelExp . LESS_EQUAL AddExp
   84       | RelExp . GREATER_EQUAL AddExp

    LESS           shift, and go to state 160
    GREATER        shift, and go to state 161
    LESS_EQUAL     shift, and go to state 162
    GREATER_EQUAL  shift, and go to state 163

    $default  reduce using rule 79 (EqExp)


State 172

   64 AddExp: AddExp . ADD MulExp
   65       | AddExp . SUB MulExp
   81 RelExp: RelExp LESS AddExp .

    ADD  shift, and go to state 73
    SUB  shift, and go to state 74

    $default  reduce using rule 81 (RelExp)


State 173

   64 AddExp: AddExp . ADD MulExp
   65       | AddExp . SUB MulExp
   82 RelExp: RelExp GREATER AddExp .

    ADD  shift, and go to state 73
    SUB  shift, and go to state 74

    $default  reduce using rule 82 (RelExp)


State 174

   64 AddExp: AddExp . ADD MulExp
   65       | AddExp . SUB MulExp
   83 RelExp: RelExp LESS_EQUAL AddExp .

    ADD  shift, and go to state 73
    SUB  shift, and go to state 74

    $default  reduce using rule 83 (RelExp)


State 175

   64 AddExp: AddExp . ADD MulExp
   65       | AddExp . SUB MulExp
   84 RelExp: RelExp GREATER_EQUAL AddExp .

    ADD  shift, and go to state 73
    SUB  shift, and go to state 74

    $default  reduce using rule 84 (RelExp)


State 176

   27 Stmt: WHILE LPAREN Cond RPAREN Stmt .

    $default  reduce using rule 27 (Stmt)


State 177

   24 Stmt: IF LPAREN Cond RPAREN Stmt ELSE . Stmt

    IF          shift, and go to state 104
    WHILE       shift, and go to state 105
    BREAK       shift, and go to state 106
    CONTINUE    shift, and go to state 107
    RETURN      shift, and go to state 108
    Ident       shift, and go to state 35
    ADD         shift, and go to state 36
    SUB         shift, and go to state 37
    LPAREN      shift, and go to state 38
    LBRACE      shift, and go to state 58
    IntConst    shift, and go to state 39
    FloatConst  shift, and go to state 40
    NOT         shift, and go to state 41
    SEMICOLON   shift, and go to state 110

    Block       go to state 111
    Stmt        go to state 178
    PrimaryExp  go to state 42
    Number      go to state 43
    AddExp      go to state 52
    Exp         go to state 115
    MulExp      go to state 46
    Lval        go to state 116
    UnaryExp    go to state 48
    UnaryOp     go to state 49


State 178

   24 Stmt: IF LPAREN Cond RPAREN Stmt ELSE Stmt .

    $default  reduce using rule 24 (Stmt)
